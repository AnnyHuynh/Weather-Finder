{"version":3,"sources":["components/titles.js","components/form.js","components/weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","className","React","Component","Form","onSubmit","this","props","getWeather","type","name","placeholder","Weather","city","country","temperature","humidity","description","error","API_KEY","App","e","a","preventDefault","target","value","fetch","api_call","json","data","console","log","setState","main","temp","sys","weather","undefined","state","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wTAaeA,E,iLATX,OACE,6BACA,wBAAIC,UAAY,0BAAhB,kBACA,uBAAGA,UAAU,6BAAb,sD,GALeC,IAAMC,WCYZC,E,iLAVX,OACE,0BAAMC,SAAYC,KAAKC,MAAMC,YAC7B,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,YAC3C,2BAAOF,KAAK,OAAOC,KAAK,UAAUC,YAAY,eAC9C,oD,GANaT,IAAMC,WC0BVS,E,iLAxBX,OACE,yBAAKX,UAAU,iBACZK,KAAKC,MAAMM,MAAQP,KAAKC,MAAMO,SAC7B,uBAAGb,UAAU,gBAAb,aACQ,0BAAMA,UAAU,kBAAkBK,KAAKC,MAAMM,KAA7C,KAAqDP,KAAKC,MAAMO,QAAhE,MAETR,KAAKC,MAAMQ,aACV,uBAAGd,UAAU,gBAAb,gBACW,0BAAMA,UAAU,kBAAkBK,KAAKC,MAAMQ,YAA7C,YAEZT,KAAKC,MAAMS,UAAY,uBAAGf,UAAU,gBAAb,aACd,0BAAMA,UAAU,kBAAhB,IAAmCK,KAAKC,MAAMS,SAA9C,MAETV,KAAKC,MAAMU,aAAe,uBAAGhB,UAAU,gBAAb,gBACd,0BAAMA,UAAU,kBAAhB,IAAmCK,KAAKC,MAAMU,YAA9C,MAEZX,KAAKC,MAAMW,OAAS,uBAAGjB,UAAU,gBACjCK,KAAKC,MAAMW,Y,GAnBEhB,IAAMC,WCGtBgB,EAAU,mCAuEDC,E,YApEb,WAAYb,GAAO,IAAD,8BAChB,4CAAMA,KAWRC,WAZkB,uCAYL,WAAMa,GAAN,qBAAAC,EAAA,6DACXD,EAAEE,iBACIV,EAAOQ,EAAEG,OAAOX,KAAKY,MACrBX,EAAUO,EAAEG,OAAOV,QAAQW,MAHtB,SAIYC,MAAM,oDAAD,OAAqDb,EAArD,YAA6DC,EAA7D,kBAA8EK,EAA9E,oBAJjB,cAILQ,EAJK,gBAKQA,EAASC,OALjB,OAKLC,EALK,OAMRhB,GAAQC,GACTgB,QAAQC,IAAIF,GACd,EAAKG,SAAS,CACZjB,YAAac,EAAKI,KAAKC,KACvBrB,KAAMgB,EAAKnB,KACXI,QAASe,EAAKM,IAAIrB,QAClBE,SAAUa,EAAKI,KAAKjB,SACpBC,YAAaY,EAAKO,QAAQ,GAAGnB,YAC7BC,MAAO,MAGT,EAAKc,SAAS,CACZjB,iBAAasB,EACbxB,UAAMwB,EACNvB,aAASuB,EACTrB,cAAUqB,EACVpB,iBAAaoB,EACbnB,MAAO,yCAvBE,4CAZK,sDAEhB,EAAKoB,MAAQ,CACXvB,iBAAasB,EACbxB,UAAMwB,EACNvB,aAASuB,EACTrB,cAAUqB,EACVpB,iBAAaoB,EACbnB,WAAOmB,GARO,E,sEAyClB,OACE,yBAAKpC,UAAU,OACb,yBAAKA,UAAU,WACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,OACb,kBAAC,EAAD,CAAMO,WAAYF,KAAKE,aACvB,kBAAC,EAAD,CACEO,YAAeT,KAAKgC,MAAMvB,YAC1BF,KAAQP,KAAKgC,MAAMzB,KACnBC,QAAWR,KAAKgC,MAAMxB,QACtBE,SAAYV,KAAKgC,MAAMtB,SACvBC,YAAeX,KAAKgC,MAAMrB,YAC1BC,MAASZ,KAAKgC,MAAMpB,iB,GA1DlBhB,IAAMC,WCKJoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c36564ad.chunk.js","sourcesContent":["import React from 'react';\n\nclass Titles extends React.Component{\n  render(){\n    return (\n      <div>\n      <h1 className = \"title-container__title\">Weather Finder</h1>\n      <p className=\"title-container__subtitle\">Find Out Temperature, Condition, and More....</p>\n      </div>\n    )\n  }\n}\n\nexport default Titles;","import React from \"react\";\n\nclass Form extends React.Component{\n  render(){\n    return(\n      <form onSubmit = {this.props.getWeather}>\n      <input type=\"text\" name=\"city\" placeholder=\"City...\"></input>\n      <input type=\"text\" name=\"country\" placeholder=\"Country...\"></input>\n      <button>Get Weather</button>\n      </form>\n    )\n  }\n}\n\nexport default Form;\n\n","import React from \"react\";\n\nclass Weather extends React.Component{\n  render(){\n    return(\n      <div className=\"weather__info\">\n        {this.props.city && this.props.country && \n          <p className=\"weather__key\">\n        Location: <span className=\"weather__value\">{this.props.city}, {this.props.country} </span>\n          </p>}\n        {this.props.temperature && \n          <p className=\"weather__key\">\n        Temperature: <span className=\"weather__value\">{this.props.temperature} Â°F </span>\n          </p>}\n        {this.props.humidity && <p className=\"weather__key\">\n        Humidity: <span className=\"weather__value\"> {this.props.humidity} </span>\n        </p>}\n        {this.props.description && <p className=\"weather__key\">\n        Description: <span className=\"weather__value\"> {this.props.description} </span>\n        </p>}\n        {this.props.error && <p className=\"weather__key\">\n        {this.props.error}\n        </p>}\n      </div>\n    )\n  }\n}\n\nexport default Weather;","import React from 'react';\nimport Titles from './components/titles';\nimport Form from \"./components/form\"\nimport Weather from \"./components/weather\";\n\nconst API_KEY = \"6bbea4e34ee34d0940d21fc3fa889d57\";\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      temperature: undefined,\n      city: undefined,\n      country: undefined,\n      humidity: undefined,\n      description: undefined,\n      error: undefined\n    }\n  }\n\n  getWeather = async(e)=>{\n    e.preventDefault();\n    const city = e.target.city.value;\n    const country = e.target.country.value;\n    const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=imperial`)\n    const data = await api_call.json();\n    if(city && country){\n      console.log(data);\n    this.setState({\n      temperature: data.main.temp,\n      city: data.name,\n      country: data.sys.country,\n      humidity: data.main.humidity,\n      description: data.weather[0].description,\n      error: ''\n    });\n  }else{\n    this.setState({\n      temperature: undefined,\n      city: undefined,\n      country: undefined,\n      humidity: undefined,\n      description: undefined,\n      error: \"Please enter city and country names!\"\n    });\n  }\n  }\n\n  render(){\n  return (\n    <div className=\"App\">\n      <div className=\"wrapper\">\n        <div className=\"main\">\n          <div className=\"container\">\n            <div className=\"row\">\n              <Titles/>\n            </div>\n            <div className=\"row\">\n              <Form getWeather={this.getWeather} />\n              <Weather \n                temperature = {this.state.temperature}\n                city = {this.state.city}\n                country = {this.state.country}\n                humidity = {this.state.humidity}\n                description = {this.state.description}\n                error = {this.state.error}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"./App.css\";\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}